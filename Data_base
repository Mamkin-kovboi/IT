import asyncpg
import asyncio
import logging

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def create_tables():
    """Создает таблицы в PostgreSQL."""
    conn = None
    try:
        # Подключение к базе данных PostgreSQL
        conn = await asyncpg.connect(
            user='postgres',
            password='223456',
            database='postgres',
            host='127.0.0.1'
        )

        # SQL-запросы на создание таблиц
        create_currency_table = """
        CREATE TABLE IF NOT EXISTS currency (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) UNIQUE NOT NULL,
            symbol VARCHAR(255) UNIQUE NOT NULL
        );
        """

        create_exchanger_table = """
        CREATE TABLE IF NOT EXISTS exchanger (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) UNIQUE NOT NULL,
            api_url VARCHAR(255) UNIQUE NOT NULL
        );
        """

        create_currency_pair_table = """
        CREATE TABLE IF NOT EXISTS currency_pair (
            id SERIAL PRIMARY KEY,
            currency_from_id INTEGER NOT NULL REFERENCES currency(id) ON DELETE CASCADE,
            currency_to_id INTEGER NOT NULL REFERENCES currency(id) ON DELETE CASCADE,
            exchanger_id INTEGER NOT NULL REFERENCES exchanger(id) ON DELETE CASCADE
        );
        """

        create_currency_price_table = """
        CREATE TABLE currency_price (
            id SERIAL PRIMARY KEY,
            currency_pair_id INTEGER REFERENCES currency_pair(id),
            price FLOAT NOT NULL,
            source VARCHAR(50) NOT NULL,
            datetime TIMESTAMP NOT NULL
        );
        """

        await conn.execute(create_currency_table)
        await conn.execute(create_exchanger_table)
        await conn.execute(create_currency_pair_table)
        await conn.execute(create_currency_price_table)

        # Вставка данных
        await conn.execute("""
            INSERT INTO currency (name, symbol)
            VALUES ('BTCUSDT', 'BTC'),
                   ('ETHUSDT', 'ETH'),
                   ('BNBUSDT', 'BNB'),
                   ('DOGEUSDT', 'DOGE')
            ON CONFLICT DO NOTHING;
        """)

        await conn.execute("""
            INSERT INTO exchanger (name, api_url)
            VALUES ('Bybit', 'https://api.bybit.com/spot/v3/public/quote/ticker/price'),
                   ('Binance', 'https://api.binance.com/api/v3/ticker/price');
        """)

        # Проверим данные, чтобы убедиться, что они были вставлены
        currencies = await conn.fetch("SELECT * FROM currency")
        exchangers = await conn.fetch("SELECT * FROM exchanger")
        logger.info(f"Данные в currency: {currencies}")
        logger.info(f"Данные в exchanger: {exchangers}")

        # Получаем id для вставки в currency_pair
        currency_btc_id = await conn.fetchval("SELECT id FROM currency WHERE name='BTCUSDT'")
        currency_doge_id = await conn.fetchval("SELECT id FROM currency WHERE name='DOGEUSDT'")
        currency_eth_id = await conn.fetchval("SELECT id FROM currency WHERE name='ETHUSDT'")
        currency_bnb_id = await conn.fetchval("SELECT id FROM currency WHERE name='BNBUSDT'")
        exchanger_bybit_id = await conn.fetchval("SELECT id FROM exchanger WHERE name='Bybit'")
        exchanger_binance_id = await conn.fetchval("SELECT id FROM exchanger WHERE name='Binance'")


        # Вставка связей
        await conn.execute("""
            INSERT INTO currency_pair (currency_from_id, currency_to_id, exchanger_id)
            VALUES 
                ($1, $2, $3), 
                ($4, $5, $6), 
                ($7, $8, $9), 
                ($10, $11, $12)
            ON CONFLICT DO NOTHING;
        """,
                           currency_btc_id, currency_doge_id, exchanger_bybit_id,
                           currency_eth_id, currency_bnb_id, exchanger_binance_id,
                           currency_doge_id, currency_btc_id, exchanger_bybit_id,
                           currency_bnb_id, currency_eth_id, exchanger_binance_id)
        # Выполнение запроса на выборку
        query = """
            SELECT  
                currency.name, 
                currency.symbol, 
                exchanger.api_url
            FROM 
                currency 
            INNER JOIN 
                currency_pair ON currency_pair.currency_from_id = currency.id
            INNER JOIN
                exchanger ON currency_pair.exchanger_id = exchanger.id;
        """
        rows = await conn.fetch(query)

        # Обработка полученных данных
        for row in rows:
            logger.info(dict(row))

        logger.info("Все таблицы успешно созданы и заполнены.")

    except Exception as e:
        logger.error(f"Ошибка при создании таблиц: {e}")

    finally:
        if conn:
            await conn.close()

# Запуск асинхронной функции
if __name__ == "__main__":
    asyncio.run(create_tables())
