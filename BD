import asyncpg
import asyncio
import logging

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def create_tables():
    """Создает таблицы в PostgreSQL."""
    conn = None
    try:
        # Подключение к базе данных PostgreSQL
        conn = await asyncpg.connect(
            user='postgres',
            password='qwerty',
            database='parser',
            host='127.0.0.1'
        )

        # SQL-запросы на создание таблиц
        create_currency_table = """
        CREATE TABLE IF NOT EXISTS currency (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) UNIQUE NOT NULL,
            symbol VARCHAR(255) UNIQUE NOT NULL
        );
        """

        create_exchanger_table = """
        CREATE TABLE IF NOT EXISTS exchanger (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) UNIQUE NOT NULL,
            api_url VARCHAR(255) UNIQUE NOT NULL
        );
        """

        create_currency_pair_table = """
        CREATE TABLE IF NOT EXISTS currency_pair (
            id SERIAL PRIMARY KEY,
            currency_from_id INTEGER NOT NULL REFERENCES currency(id),
            currency_to_id INTEGER NOT NULL REFERENCES currency(id),
            exchanger_id INTEGER NOT NULL REFERENCES exchanger(id)
        );
        """

        create_price_table = """
        CREATE TABLE IF NOT EXISTS price (
            id SERIAL PRIMARY KEY,
            currency_pair_id INTEGER NOT NULL REFERENCES currency_pair(id),
            datetime TIMESTAMP NOT NULL,
            price FLOAT NOT NULL
        );
        """

        # Выполнение запросов на создание таблиц
        await conn.execute(create_currency_table)
        await conn.execute(create_exchanger_table)
        await conn.execute(create_currency_pair_table)
        await conn.execute(create_price_table)

        logger.info("Все таблицы успешно созданы.")

    except Exception as e:
        logger.error(f"Ошибка при создании таблиц: {e}")

    finally:
        # Закрываем соединение, если оно было открыто
        if conn:
            await conn.close()


# Запуск асинхронной функции
if __name__ == "__main__":
    asyncio.run(create_tables())
